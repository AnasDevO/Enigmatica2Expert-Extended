@@ -14,6 +14,7 @@
  *  net.minecraft.inventory.InventoryCraftResult
  *  net.minecraft.inventory.InventoryCrafting
  *  net.minecraft.inventory.Slot
+ *  net.minecraft.item.Item
  *  net.minecraft.item.ItemArmor
  *  net.minecraft.item.ItemAxe
  *  net.minecraft.item.ItemBow
@@ -43,6 +44,8 @@
 package twilightforest.inventory;
 
 import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 import net.minecraft.enchantment.Enchantment;
 import net.minecraft.enchantment.EnchantmentHelper;
@@ -56,6 +59,7 @@ import net.minecraft.inventory.IInventory;
 import net.minecraft.inventory.InventoryCraftResult;
 import net.minecraft.inventory.InventoryCrafting;
 import net.minecraft.inventory.Slot;
+import net.minecraft.item.Item;
 import net.minecraft.item.ItemArmor;
 import net.minecraft.item.ItemAxe;
 import net.minecraft.item.ItemBow;
@@ -210,7 +214,7 @@ extends Container {
                 }
                 Map resultInnateEnchantments = EnchantmentHelper.func_82781_a((ItemStack)result);
                 Map inputEnchantments = EnchantmentHelper.func_82781_a((ItemStack)input);
-                inputEnchantments.keySet().removeIf(enchantment -> enchantment == null || !enchantment.func_92089_a(result));
+                inputEnchantments.keySet().removeIf(enchantment -> enchantment == null || !((Enchantment)enchantment).func_92089_a(result));
                 if (inputTags != null) {
                     inputTags.func_82580_o("ench");
                     result.func_77982_d(inputTags);
@@ -269,7 +273,30 @@ extends Container {
                 recipes.add(recipe);
             }
         }
-        return recipes.toArray(new IRecipe[0]);
+        HashMap<String, List> recipeMap = new HashMap<String, List>();
+        for (IRecipe recipe : recipes) {
+            ItemStack outputStack = recipe.func_77571_b();
+            String registryKey = Item.field_150901_e.func_177774_c((Object)outputStack.func_77973_b()) + ":" + outputStack.func_77960_j();
+            recipeMap.computeIfAbsent(registryKey, k -> new ArrayList()).add(recipe);
+        }
+        ArrayList<IRecipe> filteredRecipes = new ArrayList<IRecipe>();
+        for (List recipeList : recipeMap.values()) {
+            if (recipeList.size() == 1) {
+                filteredRecipes.add((IRecipe)recipeList.get(0));
+                continue;
+            }
+            ItemStack firstOutput = ((IRecipe)recipeList.get(0)).func_77571_b();
+            boolean allMatch = true;
+            for (IRecipe recipe : recipeList) {
+                ItemStack currentOutput = recipe.func_77571_b();
+                if (ItemStack.func_77970_a((ItemStack)firstOutput, (ItemStack)currentOutput)) continue;
+                allMatch = false;
+                break;
+            }
+            if (!allMatch) continue;
+            filteredRecipes.addAll(recipeList);
+        }
+        return filteredRecipes.toArray(new IRecipe[0]);
     }
 
     private static boolean matches(ItemStack input, ItemStack output) {