@@ -506,40 +506,45 @@ extends TinkerPulse {
     }
 
     public static void registerToolpartMeltingCasting(Material material) {
+        ItemStack stack;
         Fluid fluid = material.getFluid();
         for (IToolPart toolPart : TinkerRegistry.getToolParts()) {
             if (!toolPart.canBeCasted() || !toolPart.canUseMaterial(material) || !(toolPart instanceof MaterialItem)) continue;
-            ItemStack stack = toolPart.getItemstackWithMaterial(material);
-            ItemStack cast = new ItemStack((Item)TinkerSmeltery.cast);
+            stack = toolPart.getItemstackWithMaterial(material);
+            FluidStack cast = new ItemStack((Item)TinkerSmeltery.cast);
             Cast.setTagForPart((ItemStack)cast, (Item)stack.func_77973_b());
             if (fluid != null) {
-                TinkerRegistry.registerMelting((ItemStack)stack, (Fluid)fluid, (int)toolPart.getCost());
+                if (!Config.disableToolpartMelting) {
+                    TinkerRegistry.registerMelting((ItemStack)stack, (Fluid)fluid, (int)toolPart.getCost());
+                }
                 TinkerRegistry.registerTableCasting((ItemStack)stack, (ItemStack)cast, (Fluid)fluid, (int)toolPart.getCost());
             }
-            for (FluidStack fs : castCreationFluids) {
-                TinkerRegistry.registerTableCasting((ICastingRecipe)new CastingRecipe(cast, RecipeMatch.ofNBT((ItemStack)stack), fs, true, true));
+            if (!Config.disableCastRecipes) {
+                for (FluidStack fluidStack : castCreationFluids) {
+                    TinkerRegistry.registerTableCasting((ICastingRecipe)new CastingRecipe((ItemStack)cast, RecipeMatch.ofNBT((ItemStack)stack), fluidStack, true, true));
+                }
             }
             if (!Config.claycasts) continue;
-            ItemStack clayCast = new ItemStack((Item)TinkerSmeltery.clayCast);
-            Cast.setTagForPart((ItemStack)clayCast, (Item)stack.func_77973_b());
+            ItemStack v6 = new ItemStack((Item)clayCast);
+            Cast.setTagForPart((ItemStack)v6, (Item)stack.func_77973_b());
             if (fluid != null) {
-                RecipeMatch rm = RecipeMatch.ofNBT((ItemStack)clayCast);
-                FluidStack fs = new FluidStack(fluid, toolPart.getCost());
-                TinkerRegistry.registerTableCasting((ICastingRecipe)new CastingRecipe(stack, rm, fs, true, false));
+                RecipeMatch recipeMatch = RecipeMatch.ofNBT((ItemStack)v6);
+                FluidStack v8 = new FluidStack(fluid, toolPart.getCost());
+                TinkerRegistry.registerTableCasting((ICastingRecipe)new CastingRecipe(stack, recipeMatch, v8, true, false));
             }
-            for (FluidStack fs : clayCreationFluids) {
-                TinkerRegistry.registerTableCasting((ICastingRecipe)new CastingRecipe(clayCast, RecipeMatch.ofNBT((ItemStack)stack), fs, true, true));
+            for (FluidStack v8 : clayCreationFluids) {
+                TinkerRegistry.registerTableCasting((ICastingRecipe)new CastingRecipe(v6, RecipeMatch.ofNBT((ItemStack)stack), v8, true, true));
             }
         }
         if (castShard != null) {
-            ItemStack stack = TinkerRegistry.getShard((Material)material);
+            stack = TinkerRegistry.getShard((Material)material);
             int cost = TinkerRegistry.getShard().getCost();
             if (fluid != null) {
                 TinkerRegistry.registerMelting((ItemStack)stack, (Fluid)fluid, (int)cost);
                 TinkerRegistry.registerTableCasting((ItemStack)stack, (ItemStack)castShard, (Fluid)fluid, (int)cost);
             }
-            for (FluidStack fs : castCreationFluids) {
-                TinkerRegistry.registerTableCasting((ICastingRecipe)new CastingRecipe(castShard, RecipeMatch.ofNBT((ItemStack)stack), fs, true, true));
+            for (FluidStack cast : castCreationFluids) {
+                TinkerRegistry.registerTableCasting((ICastingRecipe)new CastingRecipe(castShard, RecipeMatch.ofNBT((ItemStack)stack), cast, true, true));
             }
         }
     }
@@ -565,11 +570,13 @@ extends TinkerPulse {
         TinkerRegistry.registerBasinCasting((ICastingRecipe)new PreferenceCastingRecipe((String)blockOre.getLeft(), null, fluid, ((Integer)blockOre.getRight()).intValue()));
         TinkerRegistry.registerTableCasting((ICastingRecipe)new PreferenceCastingRecipe((String)plateOre.getLeft(), RecipeMatch.ofNBT((ItemStack)castPlate), fluid, ((Integer)plateOre.getRight()).intValue()));
         TinkerRegistry.registerTableCasting((ICastingRecipe)new PreferenceCastingRecipe((String)gearOre.getLeft(), RecipeMatch.ofNBT((ItemStack)castGear), fluid, ((Integer)gearOre.getRight()).intValue()));
-        for (FluidStack fs : castCreationFluids) {
-            TinkerRegistry.registerTableCasting((ICastingRecipe)new CastingRecipe(castIngot, RecipeMatch.of((String)((String)ingotOre.getLeft())), fs, true, true));
-            TinkerRegistry.registerTableCasting((ICastingRecipe)new CastingRecipe(castNugget, RecipeMatch.of((String)((String)nuggetOre.getLeft())), fs, true, true));
-            TinkerRegistry.registerTableCasting((ICastingRecipe)new CastingRecipe(castPlate, RecipeMatch.of((String)((String)plateOre.getLeft())), fs, true, true));
-            TinkerRegistry.registerTableCasting((ICastingRecipe)new CastingRecipe(castGear, RecipeMatch.of((String)((String)gearOre.getLeft())), fs, true, true));
+        if (!Config.disableCastRecipes) {
+            for (FluidStack fs : castCreationFluids) {
+                TinkerRegistry.registerTableCasting((ICastingRecipe)new CastingRecipe(castIngot, RecipeMatch.of((String)((String)ingotOre.getLeft())), fs, true, true));
+                TinkerRegistry.registerTableCasting((ICastingRecipe)new CastingRecipe(castNugget, RecipeMatch.of((String)((String)nuggetOre.getLeft())), fs, true, true));
+                TinkerRegistry.registerTableCasting((ICastingRecipe)new CastingRecipe(castPlate, RecipeMatch.of((String)((String)plateOre.getLeft())), fs, true, true));
+                TinkerRegistry.registerTableCasting((ICastingRecipe)new CastingRecipe(castGear, RecipeMatch.of((String)((String)gearOre.getLeft())), fs, true, true));
+            }
         }
     }