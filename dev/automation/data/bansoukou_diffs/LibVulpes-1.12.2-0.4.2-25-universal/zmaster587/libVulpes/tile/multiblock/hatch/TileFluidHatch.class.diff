@@ -77,7 +77,7 @@ IInventoryUpdateCallback {
     private boolean outputOnly;
 
     public TileFluidHatch() {
-        this.fluidTank = new FluidTank(16000);
+        this.fluidTank = new FluidTank(32000);
         this.inventory = new EmbeddedInventory(2, (IInventoryUpdateCallback)this);
         this.inventory.setCanInsertSlot(0, true);
         this.inventory.setCanInsertSlot(1, false);
@@ -145,7 +145,7 @@ IInventoryUpdateCallback {
     public FluidStack drain(FluidStack resource, boolean doDrain) {
         if (resource.isFluidEqual(this.fluidTank.getFluid())) {
             FluidStack fluidStack = this.fluidTank.drain(resource.amount, doDrain);
-            while (this.useBucket(0, this.func_70301_a(0))) {
+            while (this.useBucket(0, this.getStackInSlot(0))) {
             }
             return fluidStack;
         }
@@ -180,7 +180,7 @@ IInventoryUpdateCallback {
         ArrayList<ModuleBase> list = new ArrayList<ModuleBase>();
         list.add((ModuleBase)new ModuleSlotArray(45, 18, (IInventory)this, 0, 1));
         list.add((ModuleBase)new ModuleSlotArray(45, 54, (IInventory)this, 1, 2));
-        if (this.field_145850_b.field_72995_K) {
+        if (this.world.isRemote) {
             list.add((ModuleBase)new ModuleImage(44, 35, new IconResource(194, 0, 18, 18, CommonResources.genericBackground)));
         }
         list.add((ModuleBase)new ModuleLiquidIndicator(27, 18, (IFluidHandler)this));
@@ -195,23 +195,23 @@ IInventoryUpdateCallback {
         return true;
     }
 
-    public int func_70302_i_() {
+    public int getSizeInventory() {
         return this.inventory.func_70302_i_();
     }
 
     @Nonnull
-    public ItemStack func_70301_a(int slot) {
+    public ItemStack getStackInSlot(int slot) {
         return this.inventory.func_70301_a(slot);
     }
 
     @Nonnull
-    public ItemStack func_70298_a(int slot, int amt) {
+    public ItemStack decrStackSize(int slot, int amt) {
         return this.inventory.func_70298_a(slot, amt);
     }
 
-    public void func_70299_a(int slot, @Nonnull ItemStack stack) {
+    public void setInventorySlotContents(int slot, @Nonnull ItemStack stack) {
         this.inventory.func_70299_a(slot, stack);
-        while (this.useBucket(0, this.func_70301_a(0))) {
+        while (this.useBucket(0, this.getStackInSlot(0))) {
         }
         if (this.hasMaster() && this.getMasterBlock() instanceof TileMultiBlock) {
             ((TileMultiBlock)this.getMasterBlock()).onInventoryUpdated();
@@ -219,35 +219,35 @@ IInventoryUpdateCallback {
     }
 
     public void onInventoryUpdated(int slot) {
-        this.func_70299_a(slot, this.inventory.func_70301_a(slot));
+        this.setInventorySlotContents(slot, this.inventory.func_70301_a(slot));
     }
 
-    public int func_70297_j_() {
+    public int getInventoryStackLimit() {
         return this.inventory.func_70297_j_();
     }
 
-    public boolean func_70300_a(@Nullable EntityPlayer player) {
+    public boolean isUsableByPlayer(@Nullable EntityPlayer player) {
         return true;
     }
 
-    public boolean func_94041_b(int slot, @Nonnull ItemStack stack) {
+    public boolean isItemValidForSlot(int slot, @Nonnull ItemStack stack) {
         return this.inventory.func_94041_b(slot, stack);
     }
 
-    public NBTTagCompound func_189515_b(NBTTagCompound nbt) {
-        super.func_189515_b(nbt);
-        nbt.func_74757_a("outputOnly", this.outputOnly);
+    public NBTTagCompound writeToNBT(NBTTagCompound nbt) {
+        super.writeToNBT(nbt);
+        nbt.setBoolean("outputOnly", this.outputOnly);
         this.inventory.writeToNBT(nbt);
-        nbt.func_74768_a("capacity", this.fluidTank.getCapacity());
+        nbt.setInteger("capacity", this.fluidTank.getCapacity());
         this.fluidTank.writeToNBT(nbt);
         return nbt;
     }
 
-    public void func_145839_a(NBTTagCompound nbt) {
-        super.func_145839_a(nbt);
-        this.outputOnly = nbt.func_74767_n("outputOnly");
+    public void readFromNBT(NBTTagCompound nbt) {
+        super.readFromNBT(nbt);
+        this.outputOnly = nbt.getBoolean("outputOnly");
         this.inventory.readFromNBT(nbt);
-        this.fluidTank = new FluidTank(nbt.func_74762_e("capacity"));
+        this.fluidTank = new FluidTank(nbt.getInteger("capacity"));
         this.fluidTank.readFromNBT(nbt);
     }
 
@@ -264,44 +264,44 @@ IInventoryUpdateCallback {
     }
 
     @Nonnull
-    public ItemStack func_70304_b(int index) {
-        return ItemStack.field_190927_a;
+    public ItemStack removeStackFromSlot(int index) {
+        return ItemStack.EMPTY;
     }
 
-    public void func_174889_b(EntityPlayer player) {
+    public void openInventory(EntityPlayer player) {
     }
 
-    public boolean func_191420_l() {
+    public boolean isEmpty() {
         return this.inventory.func_191420_l();
     }
 
-    public void func_174886_c(EntityPlayer player) {
+    public void closeInventory(EntityPlayer player) {
     }
 
-    public int func_174887_a_(int id) {
+    public int getField(int id) {
         return 0;
     }
 
-    public void func_174885_b(int id, int value) {
+    public void setField(int id, int value) {
     }
 
-    public int func_174890_g() {
+    public int getFieldCount() {
         return 0;
     }
 
-    public void func_174888_l() {
+    public void clear() {
     }
 
     @Nonnull
-    public int[] func_180463_a(EnumFacing side) {
+    public int[] getSlotsForFace(EnumFacing side) {
         return new int[]{0, 1};
     }
 
-    public boolean func_180462_a(int index, @Nonnull ItemStack itemStackIn, EnumFacing direction) {
-        return index == 0 && this.func_94041_b(index, itemStackIn);
+    public boolean canInsertItem(int index, @Nonnull ItemStack itemStackIn, EnumFacing direction) {
+        return index == 0 && this.isItemValidForSlot(index, itemStackIn);
     }
 
-    public boolean func_180461_b(int index, @Nonnull ItemStack stack, EnumFacing direction) {
+    public boolean canExtractItem(int index, @Nonnull ItemStack stack, EnumFacing direction) {
         return index == 1;
     }
 }