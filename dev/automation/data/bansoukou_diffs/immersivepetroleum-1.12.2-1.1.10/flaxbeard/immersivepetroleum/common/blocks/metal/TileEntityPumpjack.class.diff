diff --git "a/~bansoukou_unpatched\\immersivepetroleum-1.12.2-1.1.10\\flaxbeard\\immersivepetroleum\\common\\blocks\\metal\\TileEntityPumpjack.java" "b/bansoukou\\immersivepetroleum-1.12.2-1.1.10\\flaxbeard\\immersivepetroleum\\common\\blocks\\metal\\TileEntityPumpjack.java"
index 9ec62635..30862a67 100644
--- "a/~bansoukou_unpatched\\immersivepetroleum-1.12.2-1.1.10\\flaxbeard\\immersivepetroleum\\common\\blocks\\metal\\TileEntityPumpjack.java"
+++ "b/bansoukou\\immersivepetroleum-1.12.2-1.1.10\\flaxbeard\\immersivepetroleum\\common\\blocks\\metal\\TileEntityPumpjack.java"
@@ -88,7 +88,18 @@ IEBlockInterfaces.IGuiTile {
     public IBlockState state = null;
 
     public TileEntityPumpjack() {
-        super((MultiblockHandler.IMultiblock)MultiblockPumpjack.instance, new int[]{4, 6, 3}, 16000, true);
+        super((MultiblockHandler.IMultiblock)MultiblockPumpjack.instance, new int[]{4, 6, 3}, Integer.MAX_VALUE, true);
+        this.energyStorage.setLimitTransfer(0);
+    }
+
+    private void setFluxCapacity() {
+        PumpjackHandler.PowerTier powerTier = PumpjackHandler.getPowerTier(this.field_145850_b, this.func_174877_v().func_177958_n() >> 4, this.func_174877_v().func_177952_p() >> 4);
+        if (powerTier == null) {
+            throw new RuntimeException("This error is caused by IP, you have probably not configured the CT scripts correctly");
+        }
+        this.energyStorage.setCapacity(powerTier.capacity);
+        this.energyStorage.setLimitReceive(powerTier.capacity);
+        this.energyStorage.setMaxExtract(powerTier.rft);
     }
 
     public boolean canExtract() {
@@ -103,8 +114,8 @@ IEBlockInterfaces.IGuiTile {
         return PumpjackHandler.getFluid(this.field_145850_b, this.func_174877_v().func_177958_n() >> 4, this.func_174877_v().func_177952_p() >> 4);
     }
 
-    public int getResidualOil() {
-        return PumpjackHandler.getResidualFluid(this.field_145850_b, this.func_174877_v().func_177958_n() >> 4, this.func_174877_v().func_177952_p() >> 4);
+    public int[] getResidualFluidAndPumpSpeed() {
+        return PumpjackHandler.getResidualFluidAndPumpSpeed(this.field_145850_b, this.func_174877_v().func_177958_n() >> 4, this.func_174877_v().func_177952_p() >> 4);
     }
 
     public void extractOil(int amount) {
@@ -157,11 +168,13 @@ IEBlockInterfaces.IGuiTile {
     }
 
     public void func_73660_a() {
-        this.update(true);
+        if (!this.isDummy() && this.energyStorage.getMaxEnergyStored() == Integer.MAX_VALUE) {
+            this.setFluxCapacity();
+        }
+        this.updateTilePumpjack();
     }
 
-    public void update(boolean consumePower) {
-        int extracted;
+    public void updateTilePumpjack() {
         super.func_73660_a();
         if (this.field_145850_b.field_72995_K || this.isDummy()) {
             if (this.field_145850_b.field_72995_K && !this.isDummy() && this.state != null && this.wasActive) {
@@ -170,27 +183,27 @@ IEBlockInterfaces.IGuiTile {
                 float r2 = (this.field_145850_b.field_73012_v.nextFloat() - 0.5f) * 2.0f;
                 this.field_145850_b.func_175688_a(EnumParticleTypes.BLOCK_DUST, (double)((float)particlePos.func_177958_n() + 0.5f), (double)particlePos.func_177956_o(), (double)((float)particlePos.func_177952_p() + 0.5f), (double)(r1 * 0.04f), 0.25, (double)(r2 * 0.025f), new int[]{Block.func_176210_f((IBlockState)this.state)});
             }
-            if (this.wasActive && consumePower) {
+            if (this.wasActive) {
                 this.activeTicks += 1.0f;
             }
             return;
         }
         boolean active = false;
-        int consumed = Config.IPConfig.Extraction.pumpjack_consumption;
-        int n = extracted = consumePower ? this.energyStorage.extractEnergy(consumed, true) : consumed;
+        int consumed = this.energyStorage.getLimitExtract();
+        int extracted = this.energyStorage.extractEnergy(consumed, true);
         if (extracted >= consumed && this.canExtract() && !this.isRSDisabled()) {
             if ((this.func_174877_v().func_177958_n() + this.func_174877_v().func_177952_p()) % Config.IPConfig.Extraction.pipe_check_ticks == this.pipeTicks) {
                 this.lastHadPipes = this.hasPipes();
             }
             if (this.lastHadPipes) {
-                int residual = this.getResidualOil();
-                if (this.availableOil() > 0 || residual > 0) {
+                int[] residualFAndPumpSpeed = this.getResidualFluidAndPumpSpeed();
+                if (this.availableOil() > 0 || residualFAndPumpSpeed[0] > 0) {
                     int drained;
                     int accepted;
-                    int oilAmnt = this.availableOil() <= 0 ? residual : this.availableOil();
+                    int oilAmnt = this.availableOil() <= 0 ? residualFAndPumpSpeed[0] : this.availableOil();
                     this.energyStorage.extractEnergy(consumed, false);
                     active = true;
-                    FluidStack out = new FluidStack(this.availableFluid(), Math.min(Config.IPConfig.Extraction.pumpjack_speed, oilAmnt));
+                    FluidStack out = new FluidStack(this.availableFluid(), Math.min(residualFAndPumpSpeed[1], oilAmnt));
                     BlockPos outputPos = this.func_174877_v().func_177967_a(this.facing, 2).func_177967_a(this.facing.func_176746_e().func_176734_d(), 2).func_177967_a(EnumFacing.DOWN, 1);
                     IFluidHandler output = FluidUtil.getFluidHandler((World)this.field_145850_b, (BlockPos)outputPos, (EnumFacing)this.facing.func_176746_e());
                     if (output != null && (accepted = output.fill(out, false)) > 0) {
